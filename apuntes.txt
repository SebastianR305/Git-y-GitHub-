Git y GitHub
con este control de versiones, podemos guardar especificamente los cambios de un archivo en ves de guardar el archivo completo varias veces, cada ves que se le hace un cambio 

git init -"sirve para empezar un repositorio"

git add ... -"sirve para anadir este archivo a el area de staging"
git add . -"sirve para agregar todos los archivos que han tenido un cambio"
ojo"si a un archivo creado, nunca se le efectua este comando, el archivo estara untracked, por lo que en un futuro se eliminara"  

git commit -"sirve para enviar todo lo que esta en staging a el repositorio local"
git commit -m "..." -"sirve para anadir una nota a los cambios realizados"
git commit -a -"sirve para saltarse el codigo (git add)"
git commit -am "..." -"sirve para saltarse el codigo (git add)"
ojo"git commit -a o -am solo se puede efectuar si el archivo ya ha sido a√±adido anteriormente"

git status -"sirve para ver como esta el archivo"

git show -"sirve para ver todos los cambios realizados en el archivo"

git log ... -"sirve para ver toda la historia de un archivo"

linea de comandos basicos: 

pwd -"muestra la ruta de la carpeta en la que se encuentra"

cd .../ -"change directory, cambiar la carpeta en la que se encuentra"

ls -"mostrar los archivos de la carpeta en la que esta"
ls -al -"mostrar todos los archivos listados, incluidos los ocultos"
ls -l -"mostrar los todos los archivos listados, sin incluir los ocultos"
ls -a -"muestra todos los archivos pero no listados"

clear -"limpiar consola"

. =carpeta en la que se encuentra 
.. =carpeta anterior en la que estaba 

mkdir ... -"crear carpeta"

touch ... -"crear archivo vacio"

cat -"muestra el contenido de un archivo"

history -"muestra la historia completa de comandos escrita"
!1 -"repite el comando listado en el numero seleccionado"

"comando" --help -"todos los comandos que se pueden escribir con este comando"

esc+shift+zz =salir forzado de VIM 

git diff ... ... -"hacer una diferencia de las dos versiones"


RAMAS:
Master: es cada uno de los commit o versiones del proyecto
Experimentos-Development: se copia una version y se le pone un nombre, aqui puedo seguir con los commits comunmente, pero el residuo es completamente diferente a la version actual
Bugfixing-Hotfix: es cuando se detecta un problema o bug el cual debe de ser modificado creando esta rama 

merge: es cuando se conectan los cambios de una rama a la rama actual, creando una nueva


git reset ... --hard -"sirve para volver completamente a la version del commit seleccionado"
git reset ... --soft -"se vuelve a la version seleccionada, pero la historia del archivo queda intacta"
git reset HEAD -"sirve para sacar un archivo del area staging y asi que los ultimos cambios no se envien al ultimo commit"
...= version del commit
ojo"con git reset se podra volver a una version anterior del archivo, pero al efectuar el comando, se borra la historia y solo queda sobreescribirla"

git checkout ... ,,, -"sirve para ver la version seleccionada del archivo seleccionado"
git checkout master ,,, -"sirve para volver a la rama master del archivo"
...= version del commit ,,,= archivo
ojo"si despues de esto incluimos un commit eliminaremos todo lo que se haya hecho despues"

git rm -"sirve para eliminar un archivo, para volver a los archivos anteriores despues del eliminado"
git rm --cached -"elimina el archivo, pero aun asi lop mantiene en el disco duro, los archivos pasaran a un estado untracked"
git rm --force -"elimina el archivo, pero git siempre guarda todo, por lo que se podra acceder al archivo pero con comandos mucho mas avanzados"
ojo"estos archivos pueden recuperarse por medio de otros comandos"


comandos para el repositorio remoto:

git clone url -"sirve para traer una copia del master a mi carpeta actual y crea la base de datos de todos los cambios historicos en el repositorio local"
git push -"sirve para enviar la ultima version de los commits a el repositorio remoto"
git fetch -"sirve para traer un cambio de el repositorio remoto a mi repositorio local"
git merge -"sirve para fusionar la ultima version de mi repositorio local con mi version actual"
git pull -"sirve para copiar el archivo del repositorio remoto en el repositorio local y el directorio"
git push ... main -"sirve para fusionar una copia del repositorio local en el remoto"
git pull ... master -"sirve para fusionar una copia del repositorio remoto en el local"

git branch ... -"sirve para crear una rama, aqui estaremos trabajando en esta rama y en la master"
ojo"para trabajar solo sobre la rama creada: git checkout ..."

git merge ...-"sirve para anadir o mezclar los archivos de la rama seleccionada a la rama en la que estoy"
ojo"la rama en la que nos encontremos en el momento, sera la rama definitiva"
-cuando halla un problema en el merge, simplemente tendremos que solucionarlo manualmente, VSC brinda ayuda para esta ocacion-

git remote add origin url -"sirve para crear un repositorio remoto en nuestro repositorio local"
git remote -"sirve para ver los repositorios remotos anadidos"
git remote -v -"sirve para ver lo que podemos hacer con este repositorio remoto"

SSH:generacion de clave publica y privada

ssh-keygen -t rsa -b 4096 -C "sebasruiz745@gmail.com" -"sirve para crear una clave de cifrado publica y privada"
eval (ssh-agent -s) -"sirve para comprobar el servicio de cifrado" 
ssh-add ruta-id_rsa -"sirve para anadir al sistema la ubicacion de un archivo que contiene la llave privada"

alias ...="codigo o codigos" -"sirve para facilitar el trabajo en el momento de codificar, solo escribo el alias y es como si me reescribiera el codigo"
git tag -a ... -m "mensaje" (hash) -"sirve para poner una version y tener una referencia, teniendo asi un control de versiones"
git push origin --tags -"sirve para enviar los cambios de tags anadidos en el archivo al repositorio remoto"
git push origin :refs/tags/... -"sirve para borrar un tag existente en el repositorio remoto"
